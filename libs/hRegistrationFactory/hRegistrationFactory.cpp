// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "hRegistrationFactory.h"
//#include <itkImageRegistrationFactory.h>
#include <itkRegistrationAddOn\itkImageRegistrationFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>

// /////////////////////////////////////////////////////////////////
// hRegistrationFactoryPrivate
// /////////////////////////////////////////////////////////////////

class hRegistrationFactoryPrivate
{
    public:
        itk::ImageRegistrationFactory<hRegistrationFactory::RegImageType>::Pointer m_Factory;
};;

// /////////////////////////////////////////////////////////////////
// hRegistrationFactory
// /////////////////////////////////////////////////////////////////

hRegistrationFactory * hRegistrationFactory::instance(){
    if(!s_instance)
        s_instance = new hRegistrationFactory();

    return s_instance;
}

hRegistrationFactory::hRegistrationFactory( void ): dtkAbstractProcess(),d(new hRegistrationFactoryPrivate()){d->m_Factory = itk::ImageRegistrationFactory<RegImageType>::New();}


hRegistrationFactory::~hRegistrationFactory( void ){
    delete d;
    d = NULL;
}

bool hRegistrationFactory::registered(void){
       return dtkAbstractProcessFactory::instance()->registerProcessType("hRegistrationFactory",createHRegistrationFactory);
}

QString hRegistrationFactory::description(void) const{
    return "hRegistrationFactory";
}


void hRegistrationFactory::reset(){
    d->m_Factory->Reset();
    emit transformationStackReset();
}

void hRegistrationFactory::setItkRegistrationFactory(itk::ImageRegistrationFactory<RegImageType>::Pointer registrationFactory){
    d->m_Factory = registrationFactory;
}

itk::ImageRegistrationFactory<hRegistrationFactory::RegImageType>::Pointer hRegistrationFactory::getItkRegistrationFactory(){
    return d->m_Factory;
}

itk::GeneralTransform<double,3>::Pointer hRegistrationFactory::getGeneralTransform(){
    return d->m_Factory->GetGeneralTransform();
}
    
unsigned int hRegistrationFactory::addTransformation(itk::Transform<double,3,3>::Pointer arg,QStringList * methodParameters){
    unsigned int i= -1;
    i = getGeneralTransform()->InsertTransform(static_cast<itk::Transform<double,3,3>::ConstPointer>(arg));
    if (i!=-1)
        emit transformationAdded(i,methodParameters);
    return i;
}

hRegistrationFactory *hRegistrationFactory::s_instance = NULL;

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createHRegistrationFactory(void){
    return hRegistrationFactory::instance();
}


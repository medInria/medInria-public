// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef HREGISTRATIONFACTORY_H
#define HREGISTRATIONFACTORY_H

#include <dtkCore/dtkAbstractProcess.h>
#include <itkRegistrationAddOn\itkImageRegistrationFactory.h>
#include "hRegistrationFactoryExport.h"
#include "itkTransform.h"

class hRegistrationFactoryPrivate;

class HREGISTRATIONFACTORY_EXPORT hRegistrationFactory : public dtkAbstractProcess
{
    Q_OBJECT;

public:

    typedef itk::Image< float, 3 > RegImageType;

    static hRegistrationFactory * instance(void);
        
    virtual QString description(void) const;
        
    static bool registered(void);
    
    void setItkRegistrationFactory(itk::ImageRegistrationFactory<RegImageType>::Pointer registrationFactory);

    itk::ImageRegistrationFactory<RegImageType>::Pointer getItkRegistrationFactory();

    itk::GeneralTransform<double,3>::Pointer getGeneralTransform();
    
    unsigned int addTransformation(itk::Transform<double,3,3>::Pointer arg,QStringList * methodParameters);
    
    void reset();

    signals:
        void transformationAdded(unsigned int,QStringList*);
        void transformationStackReset();

protected:
    /**
    * @brief Constructor, not to be used by users.
    *
    * Use the instance() method instead to get a singleton.
    *
    * @param void
    */
    hRegistrationFactory(void);

    /**
    * @brief Destructor, not to be used by users.
    *
    * The singleton will be deleted at application closing time.
    *
    * @param void
    */
    ~hRegistrationFactory(void);

private:

    static hRegistrationFactory* s_instance;

    hRegistrationFactoryPrivate * d;
};

dtkAbstractProcess *createHRegistrationFactory(void);

#endif
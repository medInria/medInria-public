vec4 diffuse(	in vec3 l,	// light direction
		in vec3 t)	// tangent direction
{
  float LdotT = dot(l, t);
  float NdotL = sqrt(1.0-pow(LdotT, 2.0));

  return vec4(NdotL, NdotL, NdotL, 1.0);
}

vec4 specular(	in vec3 v,	// view direction
		in vec3 l,	// light direction
		in vec3 t,	// tangent direction
		in float p)	// specular power
{

  float LdotT = dot(l, t);
  float VdotT = dot(v, t);
  float NdotL = sqrt(1.0-pow(LdotT, 2.0));
  float RdotV = max(0.0, NdotL * sqrt(1.0-pow(VdotT, 2.0)) - LdotT*VdotT);

  float pf;

  if (NdotL < 0.01)
    pf = 0.0;
  else
    pf = pow(RdotV, p);

  return vec4(pf, pf, pf, 1.0);
}

// cylinder averaging method as described in Illuminated Lines Revisited
// by Mallo, Peikert, Sigg & Sadlo. Vis05, pp. 19-26
// NOT WORKING YET!
vec4 diffuse_cylavg(	in vec3 v,	// view direction
			in vec3 l,	// light direction
			in vec3 t)	// tangent direction
{
  float LdotT = dot(l, t);
  float LdotTsq = sqrt(1.0-pow(LdotT, 2.0));
  float VdotT = dot(v, t);
  float VdotTsq = sqrt(1.0-pow(VdotT, 2.0));
  float alpha = (dot(v, l) - VdotT*LdotT) / (VdotTsq-LdotTsq);
  alpha = acos(alpha);

  float result = LdotTsq * (sin(alpha) + (3.1415-alpha)*cos(alpha))/4.0;
//  result = 0.4;

//  return vec4(VdotTsq, LdotTsq, 0, 1.0);
  return vec4(result, result, result, 1.0);
}

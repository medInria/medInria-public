#!/bin/bash

# Usage:
# - mac_packager.sh path_to_plugins1 path_to_plugins2...

# To build a stand-alone mac version of the application, do the following:

# 1. build medInria
# 2. build medInria-plugins as well as your desired own plugins
# 3. chmod u+x mac_pacakger.sh
# 4. run mac_pacakger.sh with each argument being a script to package your plugins, e.g. : ./mac_packager.sh ${Plugins_Build_Dir}/mac_visages_plugins_packager.sh

# The bundle medInria.app will contain all plugins and will be standalone, packaged into MedINRIA.dmg in the install dir

cd @medInria_BINARY_DIR@/bin

\rm -fr TmpInstall
mkdir TmpInstall
cp -r medInria.app TmpInstall

cd TmpInstall

@Qt5_DIR@/../../../bin/macdeployqt medInria.app -appstore-compliant

#Run sub-packagers
injectDirs=''
for i in $*; do
        echo $i
        injectDirs="$injectDirs -inject-dir=$i"
done

resourceLibsDir=@medInria_BINARY_DIR@/lib/resources
injectDirs="$injectDirs -inject-dir=$resourceLibsDir"

@dtk_DIR@/bin/dtkDeploy medInria.app $injectDirs &>/dev/null

# A bug in dtkDeploy causes plugins to keep their original installed name so we
# must manually fix them.
for lib in @medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/PlugIns/*.dylib; do
    libname=${lib##*/}
    installedName="@executable_path/../PlugIns/$libname"
    install_name_tool -id $installedName @medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/PlugIns/$libname
done

# Resource libraries are sent as plugins to dtkDeploy (above) because they are
# not dependencies of the executable (dtkDeploy uses otool on the executable to
# find which libraires should be imported, so it will not find resource
# libraries). After the execution of dtkDeploy we move these libraries to the
# frameworks folder and adjust their install name.
resourceLibs=''
for lib in $resourceLibsDir/*.dylib; do
    libname=${lib##*/}
    copiedLib=@medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/Frameworks/$libname
    \mv @medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/PlugIns/$libname $copiedLib
    installedName="@executable_path/../Frameworks/$libname"
    install_name_tool -id $installedName $copiedLib
    resourceLibs="$resourceLibs $libname"
done

# Because of the dtkDeploy bug with install names, we have to fix the
# dependencies of the resource libraries.
for lib1 in $resourceLibs; do
    deployedLib1=@medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/Frameworks/$lib1
    installedName="@executable_path/../Frameworks/$lib1"
    for lib2 in $resourceLibs; do
        deployedLib2=@medInria_BINARY_DIR@/bin/TmpInstall/medInria.app/Contents/Frameworks/$lib2
        install_name_tool -change $1/$lib1 $installedName $deployedLib2
    done
done

#Run fancy packaging apple script

\cp -f @medInria_SOURCE_DIR@/utils/osx_packaging/BaseMedinriaPackage.sparseimage.gz @PROJECT_BINARY_DIR@/MedinriaPackage.sparseimage.gz
cd @PROJECT_BINARY_DIR@
gunzip -f MedinriaPackage.sparseimage.gz

devName=`hdiutil attach -readwrite -noverify -noautoopen MedinriaPackage.sparseimage | egrep '^/dev/' | sed 1q | awk '{print $1}'`
diskutil rename "medInria base" "medInria @MEDINRIA_SUPERBUILD_VERSION@"
\cp -rf @medInria_BINARY_DIR@/bin/TmpInstall/medInria.app /Volumes/"medInria @MEDINRIA_SUPERBUILD_VERSION@"/

sync
hdiutil detach $devName
hdiutil convert MedinriaPackage.sparseimage -format UDZO -imagekey zlib-level=9 -o "medInria-@MEDINRIA_SUPERBUILD_VERSION@.dmg" 1>/dev/null 2>/dev/null
\rm -fr MedinriaPackage.sparseimage @medInria_BINARY_DIR@/bin/TmpInstall

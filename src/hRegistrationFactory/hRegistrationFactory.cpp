// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "hRegistrationFactory.h"
#include <itkImageRegistrationFactory.h>

#include <dtkCore/dtkAbstractProcessFactory.h>

// /////////////////////////////////////////////////////////////////
// hRegistrationFactoryPrivate
// /////////////////////////////////////////////////////////////////



// /////////////////////////////////////////////////////////////////
// hRegistrationFactory
// /////////////////////////////////////////////////////////////////

hRegistrationFactory * hRegistrationFactory::instance(){
    if(!s_instance)
        s_instance = new hRegistrationFactory();

    return s_instance;
}

hRegistrationFactory::hRegistrationFactory( void ): dtkAbstractProcess(),d(new hRegistrationFactoryPrivate()){d->registrationFactory=NULL;d->m_factory=NULL;}


hRegistrationFactory::~hRegistrationFactory( void ){
    delete d;
    d = NULL;
}

bool hRegistrationFactory::registered(void){
       return dtkAbstractProcessFactory::instance()->registerProcessType("hRegistrationFactory",createHRegistrationFactory);
}

QString hRegistrationFactory::description(void) const{
    return "hRegistrationFactory";
}

bool hRegistrationFactory::registrationFactoryIsNull(){
    return (d->registrationFactory==NULL);
}

void hRegistrationFactory::reset(){
    d->m_factory->Reset();
    emit transformationStackReset();
}

hRegistrationFactory *hRegistrationFactory::s_instance = NULL;

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createHRegistrationFactory(void){
    return hRegistrationFactory::instance();
}


// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef HREGISTRATIONFACTORY_H
#define HREGISTRATIONFACTORY_H

#include <dtkCore/dtkAbstractProcess.h>
#include <itkImageRegistrationFactory.h>
#include "hRegistrationFactoryExport.h"
#include "itkTransform.h"

class hRegistrationFactoryPrivate
{
    public:
        void  * registrationFactory;
        int dimension;
        itk::ImageRegistrationFactory<itk::Image< float, 3 >>::Pointer m_factory;

};

/*
class hRegistrationFactorySignalSlot : public dtkAbstractProcess
{
    Q_OBJECT;
    
    public:
        hRegistrationFactorySignalSlot();
        ~hRegistrationFactorySignalSlot();
    public slots:
            
    signals:
    
};
*/
/*template<class TImage>
class HREGISTRATIONFACTORY_EXPORT hRegistrationFactory : public hRegistrationFactorySignalSlot, public itk::RegistrationFactory<TImage>
{*/
   
class HREGISTRATIONFACTORY_EXPORT hRegistrationFactory : public dtkAbstractProcess
{
    Q_OBJECT;

public:

    static hRegistrationFactory * instance(void);
        
    virtual QString description(void) const;
        
    static bool registered(void);
    
    template<class TImage>
    void setItkRegistrationFactory(typename itk::ImageRegistrationFactory<TImage>::Pointer regFac){
    
    if (registrationFactoryIsNull())
    {
        d->m_factory = regFac;
        d->registrationFactory = regFac;
        emit registrationFactorySet();
    }
    else
    {
        //tester si les types sont identiques sinon ... 
    }
}

    template<class TImage>
    typename itk::ImageRegistrationFactory<TImage>::Pointer getItkRegistrationFactory(){
        //itk::ImageRegistrationFactory<TImage> * m_factory = reinterpret_cast<itk::ImageRegistrationFactory<TImage>*>(d->registrationFactory);
        return d->m_factory;
    }

    template<class TImage>
    typename itk::GeneralTransform<double,3>::Pointer getGeneralTransform(){
        if (!registrationFactoryIsNull())
            //return reinterpret_cast<itk::ImageRegistrationFactory<TImage>*>(d->registrationFactory)->GetGeneralTransform();
            return (d->m_factory)->GetGeneralTransform();
    }
    
    bool registrationFactoryIsNull(void);

    template<class TImage>
    unsigned int addTransformation(typename itk::Transform<double,3,3>::Pointer arg,QStringList * methodParameters){
        unsigned int i= -1;
        i = getGeneralTransform<TImage>()->InsertTransform(static_cast<typename itk::Transform<double,3,3>::ConstPointer>(arg));
        if (i!=-1)
            emit transformationAdded(i,methodParameters);
        return i;
    }

    void reset();

    signals:
        void transformationAdded(unsigned int,QStringList*);
        void registrationFactorySet();
        void transformationStackReset();

protected:
    /**
    * @brief Constructor, not to be used by users.
    *
    * Use the instance() method instead to get a singleton.
    *
    * @param void
    */
    hRegistrationFactory(void);

    /**
    * @brief Destructor, not to be used by users.
    *
    * The singleton will be deleted at application closing time.
    *
    * @param void
    */
    ~hRegistrationFactory(void);

private:

    static hRegistrationFactory* s_instance;

    hRegistrationFactoryPrivate * d;
};

dtkAbstractProcess *createHRegistrationFactory(void);

#endif
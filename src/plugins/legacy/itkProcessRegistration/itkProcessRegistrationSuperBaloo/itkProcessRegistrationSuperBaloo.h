// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef ITKPROCESSREGISTRATIONSUPERBALOO_H
#define ITKPROCESSREGISTRATIONSUPERBALOO_H

#include <itkProcessRegistration.h>
#include "itkProcessRegistrationSuperBalooPluginExport.h"

class itkProcessRegistrationSuperBalooPrivate;

class ITKPROCESSREGISTRATIONSUPERBALOOPLUGIN_EXPORT itkProcessRegistrationSuperBaloo : public itkProcessRegistration
{
    Q_OBJECT

public:
             itkProcessRegistrationSuperBaloo(void);
    virtual ~itkProcessRegistrationSuperBaloo(void);

    virtual QString identifier(void) const;
    virtual QString description(void) const;

    static bool registered(void);

public:
    virtual int update(ImageType);

    void setSimilarityMeasure(const QString& simMeasure);
    void setIterations(const int iterations);
    void setCoarsestLevel(const int level);
    void setFinestLevel(const int level);
    void setMinimalVarianceBlockPruning(float var);
    void setProcessors(const int processors);
    void setDoubleIterations (const bool doubleIterations);

    void setLts(float lts);
    void setOverstep(bool overstep);
    void setBlockKeepRatio(float blockKeepRatio);
    void setBlockSize(unsigned short x, unsigned short y, unsigned short z);
    void setBlockSpacing(unsigned short x, unsigned short y, unsigned short z);
    void setNeighbourhoodSize(unsigned short x, unsigned short y,
                              unsigned short z);
    void setStepSize(unsigned short x, unsigned short y, unsigned short z);
    void setAlpha(float alpha);
    void setElasticVarianceRegularisation(float variance);
    void setFluidVarianceRegularisation(float variance);

    virtual itk::Transform<double,3,3>::Pointer getTransform();
    virtual QString getTitleAndParameters();

protected:
    bool writeTransform(const QString& file);
private:
    itkProcessRegistrationSuperBalooPrivate *d;
    friend class itkProcessRegistrationSuperBalooPrivate;

};

dtkAbstractProcess *createitkProcessRegistrationSuperBaloo(void);

#endif

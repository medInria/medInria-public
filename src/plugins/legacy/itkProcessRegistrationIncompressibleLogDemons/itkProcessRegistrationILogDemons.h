// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef ITKPROCESSREGISTRATIONILOGDEMONS_H
#define ITKPROCESSREGISTRATIONILOGDEMONS_H

#include <itkProcessRegistration.h>
#include "itkProcessRegistrationILogDemonsPluginExport.h"


class itkProcessRegistrationILogDemonsPrivate;

class ITKPROCESSREGISTRATIONILOGDEMONSPLUGIN_EXPORT itkProcessRegistrationILogDemons : public itkProcessRegistration
{
    Q_OBJECT

public:
    itkProcessRegistrationILogDemons(void);
    virtual ~itkProcessRegistrationILogDemons(void);

    virtual QString description(void) const;

    static bool registered(void);

public:
    virtual int update(ImageType);
    virtual bool writeTransform(const QString& file);
    void setNumberOfIterations(std::vector<unsigned int> iterations);
    void setMinIterations(int minIterations);
    void setMaximumUpdateStepLength(float maximumUpdateStepLength);
    void setGradientType(unsigned int gradientType);
    void setUpFieldSigma(float upFieldSigma);
    void setUpFieldInc(unsigned int upFieldInc);
    void setUpFieldKappa(float upFieldKappa);
    void setVelFieldSigma(float velFieldSigma);
    void setVelFieldInc(unsigned int velFieldInc);
    void setVelFieldKappa(float velFieldKappa);
    void setUseHistogramMatching(bool useHistogramMatching);
    void setBCHExpansion(unsigned int BCHExpansion);
    void setStop(std::vector<float> stop);
    void setSpatialDerivativeSigma(float spatialDerivativeSigma);
    void setStepSize(unsigned int stepSize);
    void setDTIStandardDeviation(float DTIStandardDeviation);
    void setNoiseEstimatorType(unsigned int noiseEstimatorType);
    void setNoiseEstimatorSigma(float noiseEstimatorSigma);
    void setNoiseEstimatorLM(bool noiseEstimatorLM);
    void setNoiseEstimatorEpsilon(float noiseEstimatorEpsilon);
    void setMask(dtkAbstractData *data);

    virtual itk::Transform<double,3,3>::Pointer getTransform();
    virtual QString getTitleAndParameters();

private:
    itkProcessRegistrationILogDemonsPrivate *d;

};

dtkAbstractProcess *createitkProcessRegistrationILogDemons(void);

#endif

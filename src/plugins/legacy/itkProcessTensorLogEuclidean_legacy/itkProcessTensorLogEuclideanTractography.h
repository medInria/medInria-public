// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#pragma once

#include <medAbstractDiffusionProcess.h>

#include "itkProcessTensorLogEuclideanPluginExport.h"

class itkProcessTensorLogEuclideanTractographyPrivate;

class ITKPROCESSTENSORLOGEUCLIDEANPLUGIN_EXPORT itkProcessTensorLogEuclideanTractography : public medAbstractDiffusionProcess
{
    Q_OBJECT

public:
             itkProcessTensorLogEuclideanTractography(void);
    virtual ~itkProcessTensorLogEuclideanTractography(void);

    virtual QString identifier(void) const;
    virtual QString description(void) const;

    static bool registered(void);

    /**
     * We use an enum to list parameters
     */
    enum
    {
      IntegrationMethod = 0,
      TriLinearInterpolation,
      TimeStep,
      FiberSampling,
      FAThreshold1,
      FAThreshold2,
      Smoothness,
      Sampling,
      TensorReorientation,
      MinimumLength,
      MaximumLength
    };

public slots:
    void setInputImage (medAbstractData* data);
    int  update (void);
    //void *data (void); //what data?
    medAbstractData* output (void);
    
    void onCanceled (void);

    /**
     * Set algorithm parameters. It would be wiser to use QVariant. Instead
     * we chose to subclass setParameter(double, int) to benefit from the
     * "most" general type (double).
     *
     *  @param channel:
     *  - 0: integration method (0/1/2 - default: 2)
     *  - 1: tri-linear interpolation  (O/1 - default: 1)
     *  - 2: time step (double - default: 0.5)
     *  - 3: output fiber sampling (double - default: 1.0)
     *  - 4: fa threshold 1 (double - default: 0.3)
     *  - 5: fa threshold 2 (double - default: 0/15)
     *  - 6: smoothness (double - default: 1.0)
     *  - 7: sampling (int - default: 30)
     *  - 8: transform tensors with image direction (0/1 - default: 1)
     *  - 9: minimum length (double - default: 10.0)
     *  - 10: maximum length (double - default: 200.0)
     */
    void setParameter (double value, int channel);
    
private:
    itkProcessTensorLogEuclideanTractographyPrivate *d;
};

dtkAbstractProcess *createItkProcessTensorLogEuclideanTractography(void);

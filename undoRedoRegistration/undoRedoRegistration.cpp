// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "undoRedoRegistration.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>
#include <hRegistrationFactory/hRegistrationFactory.h>
#include "itkImage.h"

// /////////////////////////////////////////////////////////////////
// undoRedoRegistration
// /////////////////////////////////////////////////////////////////

undoRedoRegistration::undoRedoRegistration(void) : itkProcessRegistration(){}

undoRedoRegistration::~undoRedoRegistration(void){}

bool undoRedoRegistration::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("undoRedoRegistration",
                                                                 createUndoRedoRegistration);
}

QString undoRedoRegistration::description(void) const
{
    return "undoRedoRegistration";
}

bool undoRedoRegistration::writeTransform(const QString& file)
{
    return false;
}

void undoRedoRegistration::undo(){
    itk::ImageRegistrationFactory<RegImageType>::Pointer m_factory = hRegistrationFactory::instance()->getItkRegistrationFactory();
    m_factory->Undo();
    m_factory->Update();
    itk::ImageBase<3>::Pointer result = m_factory->GetOutput();
    if (this->output())
        this->output()->setData (result);
    
}
    
void undoRedoRegistration::redo(){
    itk::ImageRegistrationFactory<RegImageType>::Pointer m_factory = hRegistrationFactory::instance()->getItkRegistrationFactory();
    m_factory->Redo();
    m_factory->Update();
    itk::ImageBase<3>::Pointer result = m_factory->GetOutput();
    if (this->output())
        this->output()->setData (result);
}

void undoRedoRegistration::setInput(dtkAbstractData *data, int channel){
    itkProcessRegistration::setInput(data,channel);
    hRegistrationFactory * medRegFac = hRegistrationFactory::instance();
    typedef itk::Image< float, 3 > RegImageType;
    if (channel==0)
        medRegFac->getItkRegistrationFactory()->SetFixedImage((RegImageType*)this->fixedImage().GetPointer());
    else if (channel==1)
        medRegFac->getItkRegistrationFactory()->SetMovingImage((RegImageType*)this->movingImages()[0].GetPointer());
    medRegFac->reset();
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createUndoRedoRegistration(void)
{
    return new undoRedoRegistration;
}
